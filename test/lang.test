#!/usr/bin/env sempl
# test sempl language features
SEMPL_BRACES={{}}
literal = `a` \'literal'    $string "with"$((0))ut $(expansion)
mismatched = 'don't start what you can't finish"
singlequote = '	leading and trailing whitespace '
var = value
doublequote = "A $var, a $(echo command), SOME M$((2*2))$((3+4))H"
lines = $'one line\nanother line'
tr = $"translation string"
#!end sempl env

# many language features are tested by the readme,
# so i haven't bothered including them here yet
#
# TODO: parameters, frontmatter, continuation, line interpolation, etc.

Check literal value in frontmatter
{$literal}: =>{{$literal}}<=

Check 'value" with mismatched quotes in frontmatter
{$mismatched}: =>{{$mismatched}}<=

Check single-quoted "value" in frontmatter
{$singlequote}: =>{{$singlequote}}<=

Check double-quoted "value" in frontmatter
{$doublequote}: =>{{$doublequote}}<=

Check ansi-escaped $'value' in frontmatter
{$lines}: =>{{$lines}}<=

Check translation $"string" in frontmatter
{$tr}: =>{{$tr}}<=

Check field ranges
{<./madlibs.dat} {:2} {4:5} {7} {9:}: =>{{<./madlibs.dat}}{{:2}} {{4:5}} {{7}} {{9:}}<=

Check multiple field ranges
{<./madlibs.dat} {:2,4:5,7,9:}: =>{{<./madlibs.dat}} {{:2,4:5,7,9:}}<=

Make sure non-shell-identifiers aren't expanded
{$invalid.identifier}: =>{{$invalid.identifier}}<=

Check strictness of stdin parameter
{-invalid-stdin}: =>{{-invalid-stdin}}<=

Make sure field read parameter only expands other parameters
{<invalid parameter}: =>{{<invalid parameter}}<=

Check strictness of field cut parameter
{::2}: =>{{::2}}<=

Check missing variable
{$unset_variable}: =>{{$unset_variable}}<=
  Note: error message will appear at beginning of test output

Check missing files
{/nonexistent/file}: =>{{/nonexistent/file}}<=
{./nonexistent/file}: =>{{./nonexistent/file}}<=

Check missing command
{!command-not-found}: =>{{!command-not-found}}<=

