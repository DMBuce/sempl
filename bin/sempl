#!/usr/bin/perl

use strict;
use warnings;

use File::Temp qw/ tempdir /;

# define some vars
my $prog = (split(/\//, $0))[-1];
my $usage = "Usage: $prog [SRC] [DEST]\n";

# export default env vars
$ENV{SEMPL_BRACES} ||= "{}";
$ENV{SEMPL_DUMP} ||= "";
$ENV{LB} = substr $ENV{SEMPL_BRACES},0,length($ENV{SEMPL_BRACES})/2;
$ENV{RB} = substr $ENV{SEMPL_BRACES},length($ENV{SEMPL_BRACES})/2,length($ENV{SEMPL_BRACES});
$ENV{LB} ||= $ENV{RB};

# parse args
my $src = shift || "-";
my $dest = shift || "-";

# make sure $src and $dest are not the same file
# TODO: make check work on windows
if (
	$^O ne "MSWin32"
	and $src ne "-"
	and $dest ne "-"
	and not $src =~ /\Q$ENV{LB}\E(.+?)\Q$ENV{RB}\E/
	and my ($dev1, $ino1) = (stat $dest)[0, 1]
) {
	my ($dev2, $ino2) = (stat $src)[0, 1] or die "$prog: $!\n";
	die "$prog: '$src' and '$dest' are the same file\n" if $dev1 == $dev2 && $ino1 == $ino2;
}

# open input file
my $in;
if ($src =~ /\Q$ENV{LB}\E(.+?)\Q$ENV{RB}\E/) {
	open($in, "<", \$src) or die "$prog: $!\n";
} elsif ($src eq "-") {
	$in = \*STDIN or die "$prog: $!\n";
} else {
	open($in, "<", $src) or die "$prog: $!\n";
}

# process frontmatter
$ENV{DEST} = $dest;
$ENV{SRC} = $src;
my $re_ident = "[a-zA-Z_][a-zA-Z0-9_]*?";
my $line = <$in> || "";
if ($line =~ /^#!.*$prog/) {
	while ($line = <$in>) {
		# export environment variables in frontmatter
		if ($line =~ /^#!.*$prog/) {
			# read first line of body and break loop
			$line = <$in>;
			last;
		} elsif ($line =~ /^#/) {
			next;
		} elsif ($line =~ /^\s*($re_ident)\s*=\s*(\$?'.*')\s*$/) {
			my $key = $1;
			my $value = $2;
			$value =~ s/'/'\\''/g;
			$value = `bash -c '$key=$value\necho -n "\$$key"'` or die "$prog: $!\n";
			$ENV{$key} = $value;
		} elsif ($line =~ /^\s*($re_ident)\s*=\s*(\$?".*")\s*$/) {
			my $key = $1;
			my $value = $2;
			$value =~ s/'/'\\''/g;
			$value = `bash -c '$key=$value\necho -n "\$$key"'` or die "$prog: $!\n";
			$ENV{$key} = $value;
		} elsif ($line =~ /^\s*($re_ident)\s*=\s*(.*)\s*$/) {
			my $key = $1;
			my $value = $2;
			$ENV{$key} = $value;
		} else {
			die "$prog: Invalid line in frontmatter: \n\t$line\n";
		}
	}
}

# set env vars that frontmatter can't override
$ENV{DEST} = $dest;
$ENV{SRC} = $src;
$ENV{LB} = substr $ENV{SEMPL_BRACES},0,length($ENV{SEMPL_BRACES})/2;
$ENV{RB} = substr $ENV{SEMPL_BRACES},length($ENV{SEMPL_BRACES})/2,length($ENV{SEMPL_BRACES});
$ENV{LB} ||= $ENV{RB};

# open output handle
my $out;
if ($ENV{SEMPL_DUMP} and $dest eq "-") {
	# write shell script to stdout without executing it
	$out = \*STDOUT or die "$prog: $!\n";
} elsif ($ENV{SEMPL_DUMP}) {
	# write shell script to dest.sh without executing it
	open($out, ">", $dest.".sh") or die "$prog: $!\n";
} else {
	# run shell script directly
	open($out, "|-", "bash") or die "$prog: $!\n";
}

# send all output to dest
if ($dest ne "-") {
	print $out "exec >\"$dest\"\n";
}

# create temp dir for caching command output
my $tmpdir = $ENV{TMPDIR} || "/tmp";
my $cachedir = tempdir("$tmpdir/$prog.XXXXXXXXXX", CLEANUP => 1);

# define some regexes
my $lb          = "\Q$ENV{LB}\E";
my $rb          = "\Q$ENV{RB}\E";
my $re_comment  = "#.*?";
my $re_raw      = "%.*?";
# already defined above
#my $re_ident = "[a-zA-Z_][a-zA-Z0-9_]*?";
my $re_envvar   = "\\\$$re_ident";
my $re_file     = "[/.].*?";
my $re_command  = "!.*?";
my $re_stdin    = "-";
my $re_basic    = "$re_envvar|$re_file|$re_command|$re_stdin";
my $re_read     = "<($re_basic)";
my $re_num      = "-?\\d+";
my $re_range    = "$re_num|$re_num:|$re_num:$re_num|:$re_num";
my $re_ranges   = "$re_range(,($re_range))*";
my $re_continue = "\\\\{1,3}";
my $re_param    = "($lb$re_continue$rb\$|$lb($re_comment|$re_basic|$re_read|$re_ranges)$rb)";
$re_param    = "($lb$re_continue$rb\$|$lb($re_comment|$re_basic|$re_read|$re_ranges|$re_raw)$rb)" if $ENV{SEMPL_EXPERIMENTAL};
#                  ^                        ^                      ^        ^
#                  |                        |                      |        | $re_ranges = $re_range(,$re_range)*
#                  |                        |                      |          $4 = additional ranges, not useful
#                  |                        |                      | $re_read = <($re_basic)
#                  |                        |                        $3 = basic param
#                  |                        | $2 = non-continue, non-raw param
#                  | $1 = full match

# regex dispatch table
my $dispatch = {
	$re_comment  => \&handle_comment,
	$re_raw      => \&handle_raw,
	$re_envvar   => \&handle_envvar,
	$re_file     => \&handle_file,
	$re_command  => \&handle_command,
	$re_stdin    => \&handle_stdin,
	$re_read     => \&handle_read,
	$re_ranges   => \&handle_ranges,
	$re_continue => \&handle_continue,
};

# process template body
#
# pseudocode:
#
#while read $line
#	process($line, $in, $out, $echo = "") = {
#		if $line has unprocessed matches
#			extract and remove $text, $param from $line
#			dispatch($line, $in, $out, $echo = $echo.$text, $param) = {
#				print start of loop
#				process($line, $in, $out, $echo)
#				print end of loop
#			}
#		else
#			print echo $echo.$line
#	}
#
do {
	chomp $line;
	process(\$line, $in, $out, "a", "'");
} while ($line = <$in>);

# close files
close $out;
close $in;

# processes a line
sub process {
	my ($line, $in, $out, $var, $echo) = @_;
	if ($$line =~ /$re_param/p) {
		my $param = $1;
		my $text = ${^PREMATCH};
		for my $k (keys %$dispatch) {
			if ($param =~ /^$lb$k$rb$/) {
				$$line =~ s/^\Q$text$param\E//;
				$text =~ s/'/'\\''/g;
				$param =~ s/^$lb//;
				$param =~ s/$rb$//;
				$dispatch->{$k}($line, $in, $out, $var, "$echo$text", $param);
				last;
			}
		}
	} else { # base case
		$$line =~ s/'/'\\''/g;
		print $out "echo $echo$$line'\n";
	}
}

# {#comment} handler
sub handle_comment {
	pop @_;
	process(@_);
}

# {$envvar} handler
sub handle_envvar {
	# parse args
	my ($line, $in, $out, $var, $echo, $param) = @_;
	$param =~ s/^\$//;
	if (not $ENV{SEMPL_EXPERIMENTAL}) {
		warn "$prog: Unset environment variable: \$$param\n" if not $ENV{$param};
	}
	# print start of loop
	print $out "while IFS= read -r $var; do\n";
	print $out "read -a _arr <<< \"\$$var\"\n" if $var =~ /^_/;
	# process the rest of the line
	$echo .= "'\"\$$var\"'" unless $var =~ /^_/;
	$var++ unless $var =~ /^_/;
	process($line, $in, $out, $var, $echo);
	# print end of loop
	print $out "done <<< \"\$$param\"\n";
}

# {/file} and {.file} handler
sub handle_file {
	# parse args
	my ($line, $in, $out, $var, $echo, $param) = @_;
	# TODO: check if file exists?
	# print start of loop
	$param =~ s/'/'\\''/g;
	print $out "while IFS= read -r $var; do\n";
	print $out "read -a _arr <<< \"\$$var\"\n" if $var =~ /^_/;
	# process the rest of the line
	$echo .= "'\"\$$var\"'" unless $var =~ /^_/;
	$var++ unless $var =~ /^_/;
	process($line, $in, $out, $var, $echo);
	# print end of loop
	print $out "done < '$param'\n";
}

# {!command} handler
sub handle_command {
	# parse args
	my ($line, $in, $out, $var, $echo, $param) = @_;
	$param =~ s/^!//;
	# print start of loop
	my $datfile = "$param.dat";
	$datfile =~ s/'/'\\''/g;
	$datfile =~ s/\//_/g;
	$datfile = "$cachedir/$datfile";
	print $out "[[ ! -e '$datfile' ]] && $param > '$datfile' \n";
	print $out "while IFS= read -r $var; do\n";
	print $out "read -a _arr <<< \"\$$var\"\n" if $var =~ /^_/;
	# process the rest of the line
	$echo .= "'\"\$$var\"'" unless $var =~ /^_/;
	$var++ unless $var =~ /^_/;
	process($line, $in, $out, $var, $echo);
	# print end of loop
	print $out "done < '$datfile'\n";
}

# {-} handler
my $stdin;
sub handle_stdin {
	# parse args
	my ($line, $in, $out, $var, $echo, $param) = @_;
	# print start of loop
	$stdin ||= do { local $/; <STDIN> };
	chomp $stdin;
	$stdin =~ s/'/'\\''/g;
	print $out "while IFS= read -r $var; do\n";
	print $out "read -a _arr <<< \"\$$var\"\n" if $var =~ /^_/;
	# process the rest of the line
	$echo .= "'\"\$$var\"'" unless $var =~ /^_/;
	$var++ unless $var =~ /^_/;
	process($line, $in, $out, $var, $echo);
	# print end of loop
	print $out "done <<< '$stdin'\n";
}

# {<param} handler
sub handle_read {
	# parse args
	my ($line, $in, $out, $var, $echo, $param) = @_;
	# defer to basic param handler
	$param =~ s/^<//;
	for my $k (keys %$dispatch) {
		if ($param =~ /^$k$/) {
			$dispatch->{$k}($line, $in, $out, "_line", $echo, $param);
			last;
		}
	}
}

# {N,N:,N:M,:M} handler
sub handle_ranges {
	# parse args
	my ($line, $in, $out, $var, $echo, $param) = @_;
	# figure out what fields to print
	my @vars = ();
	for my $fields (split /,/, $param) {
		if ($fields =~ /^0$/) {
			push @vars, "\$_line";

		} elsif ($fields =~ /^($re_num)$/) {
			my $n = $1 - 1;
			push @vars, "\${_arr[$n]}";

		} elsif ($fields =~ /^($re_num):$/) {
			my $n = $1 - 1;
			push @vars, "\${_arr[@]:$n}";

		} elsif ($fields =~ /^:($re_num)$/) {
			my $m = $1;
			push @vars, "\${_arr[@]:0:$m}";

		} elsif ($fields =~ /^($re_num):($re_num)$/) {
			my $n = $1 - 1;
			my $len = $2 - $n;
			push @vars, "\${_arr[@]:$n:$len}";
		}
	}
	$echo .= "'\"@vars\"'";
	# process the rest of the line
	process($line, $in, $out, $var, $echo);
}

# {%raw} handler
sub handle_raw {
	# parse args
	my ($line, $in, $out, $var, $echo, $param) = @_;
	$param =~ s/^\s+$lb|$rb\s+$//g;
	$param =~ s/^%//;
	# print the shell statement
	print $out "$param\n";
	# continue processing
	process($line, $in, $out, $var, $echo);
}

# {\} {\\} {\\\} handler
sub handle_continue {
	# parse args
	my ($line, $in, $out, $var, $echo, $param) = @_;
	# read in the next line and continue processing
	$$line = <$in>;
	chomp $$line;
	$$line =~ s/^\s+// if $param eq "\\\\\\";
	$echo .= "'\$'\\n''" if $param eq "\\";
	process($line, $in, $out, $var, $echo);
}

